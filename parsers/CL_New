#!/usr/bin/env python3

from collections import defaultdict

import arrow
import requests


### Validate Not used for initial testing
# from .lib.validation import validate


url = 'http://panelapp.coordinadorelectrico.cl/api/chart/produccion'

generation_mapping = {
                      'hidraulico': 'hydro',
                      'termicas': 'unknown',
                      'eolicas': 'wind',
                      'solar': 'solar',
                      'geotermica': 'geothermal'
                    }

# countries_exchange = {
#     'UY': {
#         'name': u'uruguai',
#         'flow': 1
#     },
#     'AR': {
#         'name': u'argentina',
#         'flow': -1
#     },
#     'PY': {
#         'name': u'paraguai',
#         'flow': -1
#     }
# }


def get_data(session, logger):
    """Requests generation data in json format."""

    s = session or requests.session()
    json_data = s.get(url).json()
    return json_data


def production_processor(json_data, zone_key):
    """
    Extracts data timestamp and sums regional data into totals by key.
    Maps keys to type and returns a tuple.
    """

    dt = arrow.get(json_data['Data'])
    totals = defaultdict(lambda: 0.0)

    breakdown = json_data[u'geracao']
    for generation, val in breakdown.items():
        totals[generation] += val

    mapped_totals = {generation_mapping.get(name, 'unknown'): val for name, val
                     in totals.items()}

    return dt, mapped_totals


def fetch_production(zone_key, session=None, target_datetime=None, logger=None):
    """
    Requests the last known production mix (in MW) of a given country
    Arguments:
    zone_key (optional) -- used in case a parser is able to fetch multiple countries
    session (optional)      -- request session passed in order to re-use an existing session
    Return:
    A dictionary in the form:
    {
      'zoneKey': 'FR',
      'datetime': '2017-01-01T00:00:00Z',
      'production': {
          'biomass': 0.0,
          'coal': 0.0,
          'gas': 0.0,
          'hydro': 0.0,
          'nuclear': null,
          'oil': 0.0,
          'solar': 0.0,
          'wind': 0.0,
          'geothermal': 0.0,
          'unknown': 0.0
      },
      'storage': {
          'hydro': -10.0,
      },
      'source': 'mysource.com'
    }
    """
    if target_datetime:
        raise NotImplementedError('This parser is not yet able to parse past dates')

    gd = get_data(session, logger)
    
    return gd
    
#     generation = production_processor(gd, zone_key)

#     datapoint = {
#       'zoneKey': zone_key,
#       'datetime': generation[0].datetime,
#       'production': generation[1],
#       'storage': {
#           'hydro': None,
#       },
#       'source': 'panelapp.coordinadorelectrico.cl'
#     }

# #    datapoint = validate(datapoint, logger,
# #                         remove_negative=True, required=['hydro'], floor=1000)

#     return datapoint


if __name__ == '__main__':
    """Main method, never used by the Electricity Map backend, but handy for testing."""

    print('fetch_production(CL) ->')
    print(fetch_production('CL'))
